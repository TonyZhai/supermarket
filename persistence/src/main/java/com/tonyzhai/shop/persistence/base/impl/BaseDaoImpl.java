package com.tonyzhai.shop.persistence.base.impl;import com.tonyzhai.shop.domain.base.support.DataPage;import com.tonyzhai.shop.domain.base.support.column.OrderBy;import com.tonyzhai.shop.persistence.base.BaseDao;import org.hibernate.Criteria;import org.hibernate.Session;import org.hibernate.criterion.Order;import javax.persistence.EntityManager;import javax.persistence.PersistenceContext;import java.lang.reflect.ParameterizedType;/** * Base dao impl * * @author Tony Zhai * @since 13-2-24 PM5:17 */public abstract class BaseDaoImpl<T> implements BaseDao<T> {    @PersistenceContext    protected EntityManager entityManager;    private Class<T> clazz = (Class<T>) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0];    @Override    public void save(T entity) {        getSession().save(entity);    }    @Override    public void update(T entity) {        getSession().update(entity);    }    @Override    public T findById(Object id) {        return entityManager.find(clazz, id);    }    @Override    public DataPage<T> pageQuery(Criteria criteria, int start, int size, OrderBy orderBy) {        if(orderBy != null) {            criteria = criteria.addOrder((orderBy.getOrderDirection() == OrderBy.OrderDirection.ASC) ? Order.asc(orderBy.getColumnName()) : Order.desc(orderBy.getColumnName()));        }        return pageQuery(criteria, start, size);    }    @Override    public DataPage<T> pageQuery(Criteria criteria, int start, int size) {        final int totalCount = criteria.list().size();        return new DataPage<T>(criteria.setFirstResult(start).setMaxResults(size).list(), start, size, totalCount);    }    protected Session getSession() {        return (Session) entityManager.getDelegate();    }}