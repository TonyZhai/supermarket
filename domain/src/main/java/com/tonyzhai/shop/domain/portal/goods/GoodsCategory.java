package com.tonyzhai.shop.domain.portal.goods;import com.tonyzhai.shop.domain.base.BaseInfo;import org.codehaus.jackson.annotate.JsonIgnoreProperties;import org.hibernate.annotations.GenericGenerator;import org.springframework.util.CollectionUtils;import javax.persistence.*;import java.util.ArrayList;import java.util.List;/** * Goods category domain model * * @author Tony Zhai * @since 13-5-3 PM7:22 */@GenericGenerator(name = "goods_category", strategy = "uuid")@Entity@JsonIgnoreProperties({        "version"})public class GoodsCategory {    @Id    @GeneratedValue(generator = "goods_category")    private String id;    @Version    private Integer version;    @Embedded    private BaseInfo baseInfo = new BaseInfo();    private String name;    @ManyToOne    @JoinColumn(name = "parent_goods_id")    private GoodsCategory parentGoodsCategory;    @OneToMany(cascade = CascadeType.ALL, mappedBy = "parentGoodsCategory", fetch = FetchType.LAZY)    private List<GoodsCategory> childGoodsCategories;    public GoodsCategory(String name) {        this.name = name;    }    public GoodsCategory() {    }    public String getId() {        return id;    }    public void setId(String id) {        this.id = id;    }    public Integer getVersion() {        return version;    }    public void setVersion(Integer version) {        this.version = version;    }    public BaseInfo getBaseInfo() {        return baseInfo;    }    public void setBaseInfo(BaseInfo baseInfo) {        this.baseInfo = baseInfo;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public GoodsCategory getParentGoodsCategory() {        return parentGoodsCategory;    }    public void setParentGoodsCategory(GoodsCategory parentGoodsCategory) {        this.parentGoodsCategory = parentGoodsCategory;    }    public List<GoodsCategory> getChildGoodsCategories() {        return childGoodsCategories;    }    public void setChildGoodsCategories(List<GoodsCategory> childGoodsCategories) {        this.childGoodsCategories = childGoodsCategories;    }    public void addChildGoodsCategory(GoodsCategory goodsCategory) {        if(!CollectionUtils.isEmpty(getChildGoodsCategories())) {            getChildGoodsCategories().add(goodsCategory);        } else {            List<GoodsCategory> goodsCategories = new ArrayList<GoodsCategory>();            goodsCategories.add(goodsCategory);            setChildGoodsCategories(goodsCategories);        }        goodsCategory.setParentGoodsCategory(this);    }}