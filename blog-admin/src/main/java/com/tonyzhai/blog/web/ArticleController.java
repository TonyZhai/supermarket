package com.tonyzhai.blog.web;import com.tonyzhai.blog.base.web.AbstractController;import com.tonyzhai.blog.domain.Article;import com.tonyzhai.blog.domain.base.domain.support.DataPage;import com.tonyzhai.blog.domain.base.exception.BaseException;import com.tonyzhai.blog.service.ArticleService;import org.apache.log4j.Logger;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.*;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import javax.validation.Valid;/** * Article controller * * @author Tony Zhai * @since 13-2-24 PM4:47 */@Controller@RequestMapping("/articles")public class ArticleController extends AbstractController {    private static final Logger logger = Logger.getLogger(ArticleController.class);    @Resource    private ArticleService articleService;    @RequestMapping(method = RequestMethod.POST, produces = "text/html")    public String create(@Valid Article article, BindingResult bindingResult,                         Model uiModel) {        if(bindingResult.hasErrors()) {            populateEditForm(uiModel, article);            return "articles/create";        }        uiModel.asMap().clear();        articleService.createArticle(article);        return "redirect:/articles";    }    @RequestMapping(params = "form", produces = "text/html")    public String createForm(Model uiModel) {        populateEditForm(uiModel, new Article());        return "articles/create";    }    @RequestMapping(produces = "text/html")    public String list() {        return "articles/list";    }    @RequestMapping(value = "/json", produces = "application/json")    @ResponseBody    public DataPage<Article> loadJsonList(            @RequestParam(value = "page", required = false) int page,            @RequestParam(value = "size", required = false) int size) {        final int firstResult = (page - 1) * size;        DataPage<Article> dataPage = articleService.pagedArticles(firstResult, size);        return dataPage;    }    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")    public String update(@Valid Article article, BindingResult bindingResult,                         Model uiModel) {        if(bindingResult.hasErrors()) {            populateEditForm(uiModel, article);            return "articles/update";        }        uiModel.asMap().clear();        Article updateArticle = articleService.findArticle(article.getId());        updateArticle.setTitle(article.getTitle());        updateArticle.setContent(article.getContent());        articleService.modifyArticle(updateArticle);        return "redirect:/articles";    }    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")    public String updateForm(@PathVariable("id") String id, Model uiModel) {        populateEditForm(uiModel, articleService.findArticle(id));        uiModel.addAttribute("requestMethod", RequestMethod.PUT);        return "articles/update";    }    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "application/json")    @ResponseBody    public String delete(@PathVariable("id") String id, Model uiModel) {        try {            articleService.removeArticle(id);            return ajaxSuccess();        } catch(BaseException e) {            logger.error(e.getMessage());            return ajaxFailed();        }    }    void populateEditForm(Model uiModel, Article article) {        uiModel.addAttribute("article", article);    }}