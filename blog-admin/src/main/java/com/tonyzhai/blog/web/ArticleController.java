package com.tonyzhai.blog.web;import com.tonyzhai.blog.domain.Article;import com.tonyzhai.blog.domain.base.domain.support.DataPage;import com.tonyzhai.blog.service.ArticleService;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.util.UriUtils;import org.springframework.web.util.WebUtils;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import javax.validation.Valid;import java.io.UnsupportedEncodingException;/** * Article controller * * @author Tony Zhai * @since 13-2-24 PM4:47 */@Controller@RequestMapping("/articles")public class ArticleController {    @Resource    private ArticleService articleService;    @RequestMapping(method = RequestMethod.POST, produces = "text/html")    public String create(@Valid Article article, BindingResult bindingResult,                         Model uiModel, HttpServletRequest httpServletRequest) {        if(bindingResult.hasErrors()) {            populateEditForm(uiModel, article);            return "articles/create";        }        uiModel.asMap().clear();        articleService.createArticle(article);        return "redirect:/articles/"                + encodeUrlPathSegment(article.getId().toString(),                httpServletRequest);    }    @RequestMapping(params = "form", produces = "text/html")    public String createForm(Model uiModel) {        populateEditForm(uiModel, new Article());        return "articles/create";    }    @RequestMapping(value = "/{id}", produces = "text/html")    public String show(@PathVariable("id") String id, Model uiModel) {        uiModel.addAttribute("article", articleService.findArticle(id));        uiModel.addAttribute("itemId", id);        return "articles/show";    }    @RequestMapping(produces = "text/html")    public String list(            @RequestParam(value = "page", required = false) int page,            @RequestParam(value = "size", required = false) int size,            Model uiModel) {        final int firstResult = (page - 1) * size;        DataPage<Article> dataPage = articleService.pagedArticles(firstResult, size);        uiModel.addAttribute("articles", dataPage.getData());        uiModel.addAttribute("maxPages", Long.valueOf(dataPage.getTotalPageCount()));        return "articles/list";    }    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")    public String update(@Valid Article article, BindingResult bindingResult,                         Model uiModel, HttpServletRequest httpServletRequest) {        if(bindingResult.hasErrors()) {            populateEditForm(uiModel, article);            return "articles/update";        }        uiModel.asMap().clear();        articleService.modifyArticle(article);        return "redirect:/articles/"                + encodeUrlPathSegment(article.getId().toString(),                httpServletRequest);    }    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")    public String updateForm(@PathVariable("id") String id, Model uiModel) {        populateEditForm(uiModel, articleService.findArticle(id));        return "articles/update";    }    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")    public String delete(@PathVariable("id") String id,                         @RequestParam(value = "page", required = false) Integer page,                         @RequestParam(value = "size", required = false) Integer size,                         Model uiModel) {        articleService.removeArticle(id);        uiModel.asMap().clear();        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());        return "redirect:/articles";    }    void populateEditForm(Model uiModel, Article article) {        uiModel.addAttribute("article", article);    }    String encodeUrlPathSegment(String pathSegment,                                HttpServletRequest httpServletRequest) {        String enc = httpServletRequest.getCharacterEncoding();        if(enc == null) {            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;        }        try {            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);        } catch(UnsupportedEncodingException uee) {        }        return pathSegment;    }}